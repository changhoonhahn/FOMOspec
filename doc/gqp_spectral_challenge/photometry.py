'''
'''
import os 
import h5py 
import numpy as np 
from speclite import filters as specFilter
# -- astropy -- 
from astropy.io import fits 
from astropy import units as U
# -- feasibgs -- 
from feasibgs import util as fUT 
from feasibgs import catalogs as Cats
# -- fomospec -- 
from fomospec import util as UT 
# --- plotting --- 
import matplotlib as mpl
import matplotlib.pyplot as plt
mpl.rcParams['text.usetex'] = True
mpl.rcParams['font.family'] = 'serif'
mpl.rcParams['axes.linewidth'] = 1.5
mpl.rcParams['axes.xmargin'] = 1
mpl.rcParams['xtick.labelsize'] = 'x-large'
mpl.rcParams['xtick.major.size'] = 5
mpl.rcParams['xtick.major.width'] = 1.5
mpl.rcParams['ytick.labelsize'] = 'x-large'
mpl.rcParams['ytick.major.size'] = 5
mpl.rcParams['ytick.major.width'] = 1.5
mpl.rcParams['legend.frameon'] = False


def f_nonoisePhoto(lib='bc03', dust=False): 
    fsource = f_nonoise(4, lib=lib)
    fsource = os.path.basename(fsource).rsplit('.', 1)[0].rsplit('_BGS_template_')[1]

    if dust: str_dust = 'dust'
    else: str_dust = 'nodust'
    fphot = 'mag.%s.%s.nonoise.dat' % (fsource, str_dust)
    return os.path.join(UT.dat_dir(), 'spectral_challenge', 'bgs', fphot) 


def Lgal_nonoisePhoto(lib='bc03', dust=False, overwrite=False, validate=False): 
    ''' generate noiseless photometry from noiseless spectral_challenge Lgal spectra 
    generated by Rita. Super simple code that convolves the spectra with the bandpass 
    decam g, r, z, W1, W2, W3, W4 filtes. 
    '''
    fphot = f_nonoisePhoto(lib=lib, dust=dust) 

    if os.path.isfile(fphot) and not overwrite: 
        _mags = np.loadtxt(fphot, unpack=True, skiprows=1, usecols=range(1,8))
        mags = _mags.T
    else: 
        galids = np.unique(testGalIDs()) # IDs of spectral_challenge galaxies 
         
        mags = np.zeros((len(galids), 8)) 
        mags[:,0] = galids
        for i, gid in enumerate(galids): 
            # read ins ource spectra
            spec_source = Lgal_nonoiseSpectra(gid, lib=lib)
            if dust: 
                flux = spec_source['flux_dust_nonoise']
            else: 
                flux = spec_source['flux_nodust_nonoise']
            # apply filters
            filter_response = specFilter.load_filters('decam2014-g', 'decam2014-r', 'decam2014-z','wise2010-W1', 'wise2010-W2', 'wise2010-W3', 'wise2010-W4')
            mags_i = filter_response.get_ab_magnitudes(flux*U.Watt/U.m**2/U.Angstrom, spec_source['wave']*U.Angstrom)
            mags[i,1:] = np.array([mags_i[0][0], mags_i[0][1], mags_i[0][2], mags_i[0][3], mags_i[0][4], mags_i[0][5], mags_i[0][6]])
        np.savetxt(fphot, mags, header='galid, g, r, z, W1, W2, W3, W4 magnitudes')

    if validate: # compare the Lgal nonoise photometry to photometry from GAMA-Legacy 
        cats = Cats.GamaLegacy() 
        gleg = cats.Read('g15') 

        fig = plt.figure(figsize=(20,4)) 
        for i_b, band in enumerate(['g', 'r', 'z', 'w1', 'w2']): 
            sub = fig.add_subplot(1,5,i_b+1) 
            sub.hist(fUT.flux2mag(gleg['legacy-photo']['flux_%s' % band]), color='k', range=(14,25), density=True, label='Legacy')
            sub.hist(mags[:,i_b], color='C1', range=(14, 25), density=True, alpha=0.5, label='LGal\nSpectral\nChallenge')
            sub.set_xlabel('%s magnitude' % band, fontsize=20) 
            sub.set_xlim(14, 25) 
        sub.legend(loc='upper right', fontsize=15) 
        fig.savefig(os.path.join(UT.fig_dir(), os.path.basename(fphot).replace('dat', 'hist.png')), bbox_inches='tight') 
        plt.close() 
    
        # g-r vs r-z
        fig = plt.figure(figsize=(6,6)) 
        sub = fig.add_subplot(111) 
        g_r = fUT.flux2mag(gleg['legacy-photo']['flux_g']) - fUT.flux2mag(gleg['legacy-photo']['flux_r'])
        r_z = fUT.flux2mag(gleg['legacy-photo']['flux_r']) - fUT.flux2mag(gleg['legacy-photo']['flux_z'])
        sub.scatter(g_r, r_z, c='k', s=1, label='Legacy')
        g_r = mags[:,0] - mags[:,1]
        r_z = mags[:,1] - mags[:,2]
        sub.scatter(g_r, r_z, c='C1', s=4, zorder=10, label='LGal\nSpectral Challenge')
        sub.set_xlabel('$g - r$', fontsize=20) 
        sub.set_xlim(-1., 3.)   
        sub.set_ylabel('$r - z$', fontsize=20) 
        sub.set_ylim(-1., 3.)   
        sub.legend(loc='upper right', handletextpad=0.2, markerscale=3, fontsize=15) 
        fig.savefig(os.path.join(UT.fig_dir(), os.path.basename(fphot).replace('dat', 'color.png')), bbox_inches='tight') 
        plt.close() 
    return mags 


def f_nonoise(galid, lib='bc03'): 
    ''' retrun noiseless spectra template file name 
    
    :param galid: 
        galaxy id number

    :param lib: (default: 'bc03') 
        specify stellar population synthesis library. Options are
        'bc03' and 'fsps'
    '''
    if lib == 'bc03': lib_str = 'BC03_Stelib'
    elif lib == 'fsps': lib_str = 'FSPS_uvmiles'
    return os.path.join(UT.dat_dir(), 'Lgal', 'templates', 'gal_spectrum_'+str(galid)+'_BGS_template_'+lib_str+'.fits')


def Lgal_nonoiseSpectra(galid, lib='bc03'): 
    ''' read in noiseless spectra of LGal object generated by Rita
    
    :param galid: 
        galaxy id number

    :param lib: (default: 'bc03') 
        specify stellar population synthesis library. Options are
        'bc03' and 'fsps'

    :return spec_in: 
        dictionary with redshift, relevant meta data and flux
    '''
    # read in source spectra
    f_inspec = fits.open(f_nonoise(galid, lib=lib))
    hdr = f_inspec[0].header
    specin = f_inspec[1].data
    meta = {}
    for k in hdr.keys(): 
        meta[k] = hdr[k]

    spec_in = {}
    spec_in['redshift'] = f_inspec[0].header['REDSHIFT']
    spec_in['wave'] = specin['wave']
    spec_in['flux_dust_nonoise'] = specin['flux_dust_nonoise'] # W/A/m2
    spec_in['flux_nodust_nonoise'] = specin['flux_nodust_nonoise'] 
    spec_in['meta'] = meta
    return spec_in 


def testGalIDs(): 
    ''' get gal IDs for test set of LGal SAM objects
    '''
    # read in spectral challenge test set filenames set by Rita 
    f_test = ''.join([UT.dat_dir(), 'spectral_challenge/', 'lgal_filenames_testset_BC03_Stellib.txt']) 
    fnames_test = np.loadtxt(f_test, unpack=True, dtype='S', skiprows=1)  
    # get gal ID's from the filename 
    galid_test = [int(fname.split('_')[2]) for fname in fnames_test]
    return galid_test


if __name__=="__main__": 
    Lgal_nonoisePhoto(lib='bc03', dust=False, overwrite=False, validate=True)
    Lgal_nonoisePhoto(lib='bc03', dust=True, overwrite=False, validate=True)
