'''
'''
import os 
import h5py 
import numpy as np 
from speclite import filters as specFilter
# -- astropy -- 
from astropy.io import fits 
from astropy import units as U
# -- fomospec -- 
from fomospec import util as UT 
# --- plotting --- 
import matplotlib as mpl
import matplotlib.pyplot as plt
mpl.rcParams['text.usetex'] = True
mpl.rcParams['font.family'] = 'serif'
mpl.rcParams['axes.linewidth'] = 1.5
mpl.rcParams['axes.xmargin'] = 1
mpl.rcParams['xtick.labelsize'] = 'x-large'
mpl.rcParams['xtick.major.size'] = 5
mpl.rcParams['xtick.major.width'] = 1.5
mpl.rcParams['ytick.labelsize'] = 'x-large'
mpl.rcParams['ytick.major.size'] = 5
mpl.rcParams['ytick.major.width'] = 1.5
mpl.rcParams['legend.frameon'] = False


def f_nonoisePhoto(galid, lib='bc03', dust=False): 
    fsource = f_nonoise(galid, lib=lib)
    fsource = fsource.rsplit('/',1)[1].rsplit('.', 1)[0] 
    if dust: str_dust = 'dust'
    else: str_dust = 'nodust'
    fphot = 'mag.%s.%s.nonoise.dat' % (fsource, str_dust)
    return os.path.join(UT.dat_dir(), 'spectral_challenge', 'bgs', fphot) 


def Lgal_nonoisePhoto(galid, lib='bc03', dust=False, overwrite=False, validate=False): 
    ''' generate noiseless photometry from noiseless Lgal spectra 
    generated by Rita. Super simple code that convolves the spectra 
    with the bandpass decam g, r, z filtes. 
    '''
    fphot = f_nonoisePhoto(galid, lib=lib, dust=dust) 

    if os.path.isfile(fphot) and not overwrite: 
        mags = np.loadtxt(fphot, unpack=True, skiprows=1)
    else: 
        # read ins ource spectra
        spec_source = Lgal_nonoiseSpectra(galid, lib=lib)
        if dust: 
            flux = spec_source['flux_dust_nonoise']
        else: 
            flux = spec_source['flux_nodust_nonoise']
        # apply filters
        filter_response = specFilter.load_filters('decam2014-g', 'decam2014-r', 'decam2014-z')
        mags = filter_response.get_ab_magnitudes(flux*U.Watt/U.m**2/U.Angstrom, spec_source['wave']*U.Angstrom)
        np.savetxt(fphot, mags, header='g, r, z magnitudes')
    return mags 


def f_nonoise(galid, lib='bc03'): 
    ''' retrun noiseless spectra template file name 
    
    :param galid: 
        galaxy id number

    :param lib: (default: 'bc03') 
        specify stellar population synthesis library. Options are
        'bc03' and 'fsps'
    '''
    if lib == 'bc03': lib_str = 'BC03_Stelib'
    elif lib == 'fsps': lib_str = 'FSPS_uvmiles'
    return os.path.join(UT.dat_dir(), 'Lgal', 'templates', 'gal_spectrum_'+str(galid)+'_BGS_template_'+lib_str+'.fits')


def Lgal_nonoiseSpectra(galid, lib='bc03'): 
    ''' read in noiseless spectra of LGal object generated by Rita
    
    :param galid: 
        galaxy id number

    :param lib: (default: 'bc03') 
        specify stellar population synthesis library. Options are
        'bc03' and 'fsps'

    :return spec_in: 
        dictionary with redshift, relevant meta data and flux
    '''
    # read in source spectra
    f_inspec = fits.open(f_nonoise(galid, lib=lib))
    hdr = f_inspec[0].header
    specin = f_inspec[1].data
    meta = {}
    for k in hdr.keys(): 
        meta[k] = hdr[k]

    spec_in = {}
    spec_in['redshift'] = f_inspec[0].header['REDSHIFT']
    spec_in['wave'] = specin['wave']
    spec_in['flux_dust_nonoise'] = specin['flux_dust_nonoise'] # W/A/m2
    spec_in['flux_nodust_nonoise'] = specin['flux_nodust_nonoise'] 
    spec_in['meta'] = meta
    return spec_in 


def testGalIDs(): 
    ''' get gal IDs for test set of LGal SAM objects
    '''
    # read in spectral challenge test set filenames set by Rita 
    f_test = ''.join([UT.dat_dir(), 'spectral_challenge/', 'lgal_filenames_testset_BC03_Stellib.txt']) 
    fnames_test = np.loadtxt(f_test, unpack=True, dtype='S', skiprows=1)  
    # get gal ID's from the filename 
    galid_test = [int(fname.split('_')[2]) for fname in fnames_test]
    return galid_test


if __name__=="__main__": 
    galids = testGalIDs()
    for gid in np.unique(galids): 
        Lgal_nonoisePhoto(gid, lib='bc03', dust=False, overwrite=True)
        Lgal_nonoisePhoto(gid, lib='bc03', dust=True, overwrite=True)
